/* Test script for creating and populating ArangoDB graph */
var Arango = require('arango');

var db = new Arango.Connection("http://127.0.0.1:8529");

// adjust these to your liking
var dbName = 'testDB';
var graph = 'graph';	   
var edgeCollection = 'edges';
var vertexCollection = 'vertices';

var MAX_NODES = 100000;
var MAX_WIDTH = 24;
var MAX_DEPTH = 100;

db.database.delete(dbName).end(function(ret){

    if(!ret.error)
	console.log("deleted database:", dbName);
    
    console.log("creating database:", dbName);

    db.database.create(dbName).then(function(){

	db = db.useDatabase(dbName);

	console.log("creating graph:", graph);
	console.log("edgeCollection:", edgeCollection);
	console.log("vertexCollection:", vertexCollection);
	
	return db.graph.create(graph,[{collection:edgeCollection,from:[vertexCollection],to:[vertexCollection]}]);
    }).then(generate_graph)
	.catch(log_error);
    
});

function log_error(e){
    console.log("Error:",e.stack ? e.stack : e);
}

function generate_graph(ret){
    console.log("injecting %s nodes into:", MAX_NODES, ret.graph.name);

    var nodeList = {};

    var node, key, nodes = MAX_NODES;
    
    var depth, width, x, y;
    
    // generate a linked list of random nodes
    while(nodes > 0) {
	depth = Math.floor(Math.random()*MAX_DEPTH)+1;

	if((nodes - depth) < 0 ) depth-= depth - nodes;
	
	width = Math.floor(Math.random()*MAX_WIDTH)+1;

	if((nodes - width) < 0 ) width-= width - nodes;
	
	nodes-= depth + width;
	
	for(node = nodeList, x = 0; x < width; x++){
	    key = 'branch' + x;
	    node = node[key] = node[key] || {}; 
	}

	for(y = 0; y < depth; y++){
	    node['leaf'+y] = y;
	}
    }

    // populate nodes originating from a root vertex
    db.graph.vertex.create(graph,{_key:'root'}, vertexCollection)
	.then(function(v){
	    var root_id = v.vertex._id;
	    var keys = Object.keys(nodeList);
	    
	    console.log("root vertex:",root_id);
	    
	    keys.forEach(function(branch){
		create_nodes(nodeList[branch],root_id);
	    });
	}).catch(log_error);		
}	    

function create_nodes(list,from){
    var keys = Object.keys(list);
    
    keys.forEach(function(node){
	var type = typeof(list[node]) === 'object' ? 'branch' : 'leaf';
	db.graph
	    .vertex.create(graph,{type:type,name:node}, vertexCollection)
	    .then(function(v){
		
		if(type === 'branch'){
		    create_nodes(list[node],v.vertex._id);
		}
		
		return db.graph.edge.create(graph, {type:type, name:node}, from, v.vertex._id); 
	    }).catch(log_error);
    });
}
